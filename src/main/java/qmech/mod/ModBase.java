package qmech.mod;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import qmech.lib.util.FuelHandler;
import qmech.lib.util.LoggingHelper;
import qmech.lib.util.WorldGenerator;
import qmech.mod.network.CommonProxy;

@Mod(modid = Reference.MOD_ID,
        name = Reference.MOD_NAME,
        version = Reference.MOD_VERSION)
public class ModBase {

    //Proxy Handler
    @SidedProxy(clientSide = Reference.CLIENT_PROXY_CLASS, serverSide = Reference.SERVER_PROXY_CLASS)
    public static CommonProxy proxy;
    //Instance Variable
    @Instance(Reference.MOD_ID)
    private static ModBase instance;
    //Helpers
    private LoggingHelper loggingHelper;
    WorldGenerator worldGen;
    private FuelHandler fuelHandler;
    //Event Variables
    FMLPreInitializationEvent event_preInit;
    private FMLInitializationEvent event_init;
    private FMLPostInitializationEvent event_postInit;

    public static ModBase getInstance() {
        return instance;
    }

    //ForgeModLoader EventHandlers
    @EventHandler
    public void preInit(FMLPreInitializationEvent event) throws IllegalAccessException, InstantiationException {
        System.out.println("Fancy logging coming soon to a mod near you :)");
        this.loggingHelper = LoggingHelper.getInstance();

        this.loggingHelper.debug("Starting PreInitialization");

        this.setEvent_preInit(event);

        ModConfig.preInit();

        this.setWorldGen(new WorldGenerator(0));
        this.setFuelHandler(new FuelHandler());

        this.metaInfo(event);

        ModBlocks.preInit();
        ModItems.preInit();
        ModFluids.preInit();
        ModEquipment.preInit();

        ModRecipes.preInit();

        ModCTabs.preInit();

        proxy.preInit();
    }

    @EventHandler
    public void init(FMLInitializationEvent event) {
        this.loggingHelper.debug("Starting Initialization");

        this.setEvent_init(event);
    }

    @EventHandler
    public void postInit(FMLPostInitializationEvent event) {
        this.loggingHelper.debug("Starting PostInitialization");

        this.setEvent_postInit(event);

        this.loggingHelper.debug("Starting Mod PostInitialization");
    }

    void metaInfo(FMLPreInitializationEvent evt) {
        ModMetadata meta = evt.getModMetadata();
        meta.autogenerated = false;

        meta.modId = Reference.MOD_ID;
        meta.name = Reference.MOD_NAME;
        meta.version = Reference.MOD_VERSION;

        meta.authorList = Reference.MOD_AUTHORS;
        meta.description = Reference.MOD_DESCRIPTION;
        meta.credits = Reference.MOD_CREDITS;
        meta.url = Reference.MOD_URL;
    }

    public WorldGenerator getWorldGen() {
        return this.worldGen;
    }

    void setWorldGen(WorldGenerator worldGen) {
        this.worldGen = worldGen;
    }

    public FuelHandler getFuelHandler() {
        return this.fuelHandler;
    }

    void setFuelHandler(FuelHandler fuelHandler) {
        this.fuelHandler = fuelHandler;
    }

    public FMLPreInitializationEvent getEvent_preInit() {
        return this.event_preInit;
    }

    void setEvent_preInit(FMLPreInitializationEvent event_preInit) {
        this.event_preInit = event_preInit;
    }

    public FMLInitializationEvent getEvent_init() {
        return this.event_init;
    }

    void setEvent_init(FMLInitializationEvent event_init) {
        this.event_init = event_init;
    }

    public FMLPostInitializationEvent getEvent_postInit() {
        return this.event_postInit;
    }

    void setEvent_postInit(FMLPostInitializationEvent event_postInit) {
        this.event_postInit = event_postInit;
    }
}
