package qmech.mod;

import qmech.lib.util.LoggingHelper;
import qmech.lib.util.FuelHandler;
import qmech.lib.util.WorldGenerator;
import qmech.mod.network.CommonProxy;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;

@Mod(modid = Reference.MOD_ID,
	 name = Reference.MOD_NAME,
	 version = Reference.MOD_VERSION)
public class ModBase {
	
	//ForgeModLoader EventHandlers
	@EventHandler
	public void preInit (FMLPreInitializationEvent event) throws IllegalAccessException, InstantiationException {
        System.out.println("Fancy logging coming soon to a mod near you :)");
        loggingHelper = LoggingHelper.getInstance();

		loggingHelper.debug("Starting PreInitialization");

        this.setEvent_preInit(event);

        ModConfig.preInit();

		this.setWorldGen(new WorldGenerator(0));
		this.setFuelHandler(new FuelHandler());

		this.metaInfo(event);

		ModBlocks.preInit();
		ModItems.preInit();
		ModFluids.preInit();
		ModEquipment.preInit();
		
		ModRecipes.preInit();

        ModCTabs.preInit();
		
		proxy.preInit();
	}
	
	@EventHandler
	public void init (FMLInitializationEvent event) {
		loggingHelper.debug("Starting Initialization");

		this.setEvent_init(event);
		
		proxy.init();
	}
	
	@EventHandler 
	public void postInit (FMLPostInitializationEvent event) {
		loggingHelper.debug("Starting PostInitialization");
		
		this.setEvent_postInit(event);
		
		loggingHelper.debug("Starting Mod PostInitialization");
		
		proxy.postInit();
	}
	
	public void metaInfo (FMLPreInitializationEvent evt) {
		ModMetadata meta = evt.getModMetadata();
		meta.autogenerated = false;
		
		meta.modId = Reference.MOD_ID;
		meta.name = Reference.MOD_NAME;
		meta.version = Reference.MOD_VERSION;
		
		meta.authorList = Reference.MOD_AUTHORS;
		meta.description = Reference.MOD_DESCRIPTION;
		meta.credits = Reference.MOD_CREDITS;
		meta.url = Reference.MOD_URL;
	}
	
	//Instance Variable    
	@Instance(Reference.MOD_ID)
	static ModBase instance;
	
	//Proxy Handler
	@SidedProxy(clientSide=Reference.CLIENT_PROXY_CLASS, serverSide=Reference.SERVER_PROXY_CLASS)
	public static CommonProxy proxy;
	
	//Helpers
	LoggingHelper loggingHelper;
	WorldGenerator worldGen;
	FuelHandler fuelHandler;

	//Event Variables
	FMLPreInitializationEvent event_preInit;
	FMLInitializationEvent event_init;
	FMLPostInitializationEvent event_postInit;

	public static ModBase getInstance() {
		return instance;
	}
	public WorldGenerator getWorldGen() {
		return worldGen;
	}
	public void setWorldGen(WorldGenerator worldGen) {
		this.worldGen = worldGen;
	}
	public FuelHandler getFuelHandler() {
		return fuelHandler;
	}
	public void setFuelHandler(FuelHandler fuelHandler) {
		this.fuelHandler = fuelHandler;
	}

    public FMLPreInitializationEvent getEvent_preInit() {
		return event_preInit;
	}
	public void setEvent_preInit(FMLPreInitializationEvent event_preInit) {
		this.event_preInit = event_preInit;
	}
	public FMLInitializationEvent getEvent_init() {
		return event_init;
	}
	public void setEvent_init(FMLInitializationEvent event_init) {
		this.event_init = event_init;
	}
	public FMLPostInitializationEvent getEvent_postInit() {
		return event_postInit;
	}
	public void setEvent_postInit(FMLPostInitializationEvent event_postInit) {
		this.event_postInit = event_postInit;
	}
}
